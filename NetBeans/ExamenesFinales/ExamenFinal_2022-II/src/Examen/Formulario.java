/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Examen;

import javax.swing.JOptionPane;

/**
 *
 * @author Usmp
 */
public class Formulario extends javax.swing.JFrame {

    Persona[] vec = new Persona[1000];
    int indice = 0;

    /**
     * Creates new form Forumlario
     */
    public Formulario() {
        initComponents();
    }

    public int Buscar(int nBus) {
        for (int c = 0; c < indice; c++) {
            if (vec[c].getCodigo() == nBus) {
                return c;
            }
        }
        return -1;
    }

    public void Eliminar(int pos) {
        for (int j = pos; j < indice - 1; j++) {
            vec[j] = vec[j + 1];
        }
        indice--;
        Persona aux[] = new Persona[vec.length];
        for (int c = 0; c < indice; c++) {
            aux[c] = vec[c];
        }
        vec = aux;
    }

    public void Mostrar_Persona(int i) {
        txtA.setText(null);
        switch (i) {
            case 1:
                for (int c = 0; c < indice; c++) {
                    if (vec[c].getCodigo() <= 1199) {
                        Alumno A = (Alumno) vec[c];
                        txtA.append("\nCODIGO: " + A.getCodigo()
                                + "\nNOMBRE Y APELLIDOS: " + A.getNom_ape()
                                + "\nSEXO: " + A.getSexo()
                                + "\nEDAD: " + A.getEdad()
                                + "\nCARRERA: " + A.getCarrera()
                                + "\nCREDITOS: " + A.getCreditos() + "\n");
                    }
                }
                break;
            case 2:
                int t = Integer.parseInt(Herramientas.ingreso("1. DOCENTE TIEMPO COMPLETO\n2.DOCENTE TIEMPO PARCIAL"));
                switch (t) {
                    case 1:
                        for (int c = 0; c < indice; c++) {
                            if (vec[c].getCodigo() >= 1200 && vec[c].getCodigo() <= 1299) {
                                Docente_TC Dtc = (Docente_TC) vec[c];
                                txtA.append("\nCODIGO: " + Dtc.getCodigo()
                                        + "\nNOMBRE Y APELLIDOS: " + Dtc.getNom_ape()
                                        + "\nSEXO: " + Dtc.getSexo()
                                        + "\nEDAD: " + Dtc.getEdad()
                                        + "\nHORAS: " + Dtc.getHoras()
                                        + "\nGRADO ACADEMICO: " + Dtc.getGradoacademico()
                                        + "\nPERIODO DE CONTRATO: " + Dtc.getPeriodo_con() + "\n");
                            }
                        }
                        break;
                    case 2:
                        for (int c = 0; c < indice; c++) {
                            if (vec[c].getCodigo() >= 1300 && vec[c].getCodigo() <= 1399) {
                                Docente_TP Dtp = (Docente_TP) vec[c];
                                txtA.append("\nCODIGO: " + Dtp.getCodigo()
                                        + "\nNOMBRE Y APELLIDOS: " + Dtp.getNom_ape()
                                        + "\nSEXO: " + Dtp.getSexo()
                                        + "\nEDAD: " + Dtp.getEdad()
                                        + "\nHORAS: " + Dtp.getHoras()
                                        + "\nGRADO ACADEMICO: " + Dtp.getGradoacademico()
                                        + "\nU. ACADEMICO: " + Dtp.getUnidad_acad() + "\n");
                            }
                        }
                        break;
                    default:
                        Herramientas.mensajeError("OPCION INCORRECTA");
                }
                break;
            default:
                Herramientas.mensajeError("OPCION INCORRECTA");
        }
    }

    public boolean codigoRepetido(int cod) {
        boolean x = false;
        for (int c = indice - 1; c >= 0; c--) {
            if (cod == vec[c].getCodigo()) {
                x = true;
            }
        }
        return x;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnRegistrar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtA = new javax.swing.JTextArea();
        btnImprimir = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnPension = new javax.swing.JButton();
        btnSalario = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("USMP");

        btnRegistrar.setText("REGISTRAR");
        btnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarActionPerformed(evt);
            }
        });

        txtA.setColumns(20);
        txtA.setRows(5);
        jScrollPane1.setViewportView(txtA);

        btnImprimir.setText("IMPRIMIR");
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });

        btnEliminar.setText("ELIMINAR");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnPension.setText("PENSION DEL ALUMNO");
        btnPension.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPensionActionPerformed(evt);
            }
        });

        btnSalario.setText("SALARIO DEL DOCENTE");
        btnSalario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalarioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnRegistrar, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnImprimir))
                    .addComponent(btnEliminar, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnPension, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnSalario, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(122, 122, 122)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnEliminar, btnImprimir, btnPension, btnRegistrar, btnSalario});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnRegistrar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnImprimir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEliminar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 126, Short.MAX_VALUE)
                        .addComponent(btnPension)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSalario))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
        int I = Integer.parseInt(Herramientas.ingreso("QUE DESEA MOSTRAR:\n1.ALUMNO\n2.DOCENTE"));
        Mostrar_Persona(I);
    }//GEN-LAST:event_btnImprimirActionPerformed

    private void btnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarActionPerformed
        int D = Integer.parseInt(Herramientas.ingreso("INGRESE QUE DESEA REGISTRAR\n1.ALUMNO\n2.DOCENTE"));
        int c;
        String n;
        String s;
        int e;
        switch (D) {
            case 1:
                do {
                    c = Herramientas.generarAleatorio(1000, 1199);
                } while (codigoRepetido(c) == true);
                n = Herramientas.ingreso("INGRESE NOMBRE Y APELLIDO").toUpperCase();
                s = Herramientas.ingreso("INGRESE SEXO").toUpperCase();
                e = Integer.parseInt(Herramientas.ingreso("INGRESE EDAD"));
                if (e >= 18) {
                    String t = Herramientas.ingreso("INGRESE CARRERA").toUpperCase();
                    String car;
                    switch (t) {
                        case "PSICOLOGIA":
                        case "ODONTOLOGIA":
                        case "ARQUITECTURA":
                            car = t;
                            int cre = Integer.parseInt(Herramientas.ingreso("INGRESAR CANTIDAD DE CREDITOS"));
                            Alumno A = new Alumno(c, n, s, e, car, cre);
                            vec[indice] = A;
                            A.Mostrar();
                            indice++;
                            break;
                        default:
                            Herramientas.mensajeError("SOLAMENTE SE PERMITE INGRESAR LAS CARRERAS DE ODONTOLOGIA, PSICOLOGIA O ARQUITECTURA ERROR EN EL INGRESO");
                    }
                } else {
                    Herramientas.mensajeError("NO SE PUEDEN REGISTRAR ALUMNOS MENORES DE 18");
                }
                break;
            case 2:
                int tipo = Integer.parseInt(Herramientas.ingreso("1.DOCENTE TIEMPO COMPLETO\n2.DOCENTE TIEMPO PARCIAL"));
                switch (tipo) {
                    case 1:
                        do {
                            c = Herramientas.generarAleatorio(1200, 1299);
                        } while (codigoRepetido(c) == true);
                        n = Herramientas.ingreso("INGRESE NOMBRE Y APELLIDO").toUpperCase();
                        s = Herramientas.ingreso("INGRESE SEXO").toUpperCase();
                        e = Integer.parseInt(Herramientas.ingreso("INGRESE EDAD"));
                        if (e >= 18) {
                            int h = Integer.parseInt(Herramientas.ingreso("INGRESE HORAS:"));
                            if (h == 40) {
                                String gA = Herramientas.ingreso("ESCRIBA GRADO ACADEMICO:\nBACHILLER\nMAGISTER\nDOCTOR").toUpperCase();
                                if (gA.equals("BACHILLER") || gA.equals("MAGISTER") || gA.equals("DOCTOR")) {
                                    String pC = Herramientas.ingreso("PERIODO DE CONTRATO:\nANUAL\nSEMESTRAL").toUpperCase();
                                    if (pC.equals("ANUAL") || pC.equals("SEMESTRAL")) {
                                        Docente_TC Dtc = new Docente_TC(c, n, s, e, h, gA, pC);
                                        vec[indice] = Dtc;
                                        Dtc.Mostrar();
                                        indice++;
                                    } else {
                                        Herramientas.mensajeError("OPCION INCORRECTA");
                                    }
                                } else {
                                    Herramientas.mensajeError("OPCION INCORRECTA");
                                }
                            } else {
                                Herramientas.mensajeError("DE TIEMPO COMPLETO DEBE SER 40 HORAS");
                            }
                        } else {
                            Herramientas.mensajeError("NO SE PUEDEN REGISTRAR PERSONAS MENORES DE EDAD");
                        }
                        break;
                    case 2:
                        do {
                            c = Herramientas.generarAleatorio(1300, 1399);
                        } while (codigoRepetido(c) == true);
                        n = Herramientas.ingreso("INGRESE NOMBRE Y APELLIDO").toUpperCase();
                        s = Herramientas.ingreso("INGRESE SEXO").toUpperCase();
                        e = Integer.parseInt(Herramientas.ingreso("INGRESE EDAD"));
                        if (e >= 18) {
                            int h = Herramientas.generarAleatorio(1, 39);
                            String gA = Herramientas.ingreso("ESCRIBA GRADO ACADEMICO\nBACHILLER\nMAGISTER\nDOCTOR").toUpperCase();
                            if (gA.equals("BACHILLER") || gA.equals("MAGISTER") || gA.equals("DOCTOR")) {
                                String uA = Herramientas.ingreso("INGRESE UNIDAD ACADEMICA:").toUpperCase();
                                Docente_TP Dtp = new Docente_TP(c, n, s, e, h, gA, uA);
                                vec[indice] = Dtp;
                                Dtp.Mostrar();;
                                indice++;
                            } else {
                                Herramientas.mensajeError("OPCION INCORRECTA");
                            }
                        } else {
                            Herramientas.mensajeError("NO SE PUEDEN REGISTRAR PERSONAS MENORES DE EDAD");
                        }
                        break;
                    default:
                        Herramientas.mensajeError("LA RESPUESTA NO ES CORRECTA");
                }
                break;
            default:
                Herramientas.mensajeError("RESPUESTA INCORRECTA");
        }
    }//GEN-LAST:event_btnRegistrarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        int nbus = Integer.parseInt(Herramientas.ingreso("INGRESO CODIGO"));
        int pos = Buscar(nbus);
        if (pos != -1) {
            Eliminar(pos);
            Herramientas.mensaje("PERSONA ELIMINADA");
        } else {
            Herramientas.mensaje("PERSONA NO ENCONTRADA");
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnPensionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPensionActionPerformed
        int nbus = Integer.parseInt(Herramientas.ingreso("INGRESO CODIGO"));
        if (nbus >= 1000 && nbus <= 1199) {
            int pos = Buscar(nbus);
            if (pos != -1) {
                Alumno A = (Alumno) vec[pos];
                Herramientas.mensaje("La pension del alumno es: " + String.valueOf(A.Calcular()) + "\n y su cuota mensual es de " + String.valueOf(Math.round((A.Calcular() / 5.0) * 100.0) / 100.0));
            } else {
                Herramientas.mensaje("NO SE ENCONTRO ALUMNO");
            }
        } else {
            Herramientas.mensaje("EL CODIGO NO ES DE UN ALUMNO");
        }
    }//GEN-LAST:event_btnPensionActionPerformed

    private void btnSalarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalarioActionPerformed
        int nbus = Integer.parseInt(Herramientas.ingreso("INGRESO CODIGO"));
        if (nbus >= 1200 && nbus <= 1399) {
            int pos = Buscar(nbus);
            if (pos != -1) {
                if (vec[pos].getCodigo() >= 1200 && vec[pos].getCodigo() <= 1299) {
                    Docente_TC Dtc = (Docente_TC) vec[pos];
                    Herramientas.mensaje("El salario es de: " + String.valueOf(Dtc.Salario()));
                } else if (vec[pos].getCodigo() >= 1300 && vec[pos].getCodigo() <= 1399) {
                    Docente_TP Dtp = (Docente_TP) vec[pos];
                    Herramientas.mensaje("El salario es de: " + String.valueOf(Dtp.Salario()));
                }
            } else {
                Herramientas.mensaje("NO SE ENCONTRO DOCENTE");
            }
        } else {
            Herramientas.mensaje("EL CODIGO NO ES DE UN DOCENTE");
        }
    }//GEN-LAST:event_btnSalarioActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Formulario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Formulario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Formulario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Formulario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Formulario().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnImprimir;
    private javax.swing.JButton btnPension;
    private javax.swing.JButton btnRegistrar;
    private javax.swing.JButton btnSalario;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtA;
    // End of variables declaration//GEN-END:variables
}
